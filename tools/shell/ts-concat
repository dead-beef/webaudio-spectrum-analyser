#!/usr/bin/env node
// -*- mode: js -*-

const fs = require('fs');
const path = require('path');

function parse(file) {
  let res = {
    imports: [],
    localImports: [],
    path: null,
    contents: null
  };
  let importsExpr = /^\s*import\s*\{[^{}]+\}\s*from\s*['"][^'"]+['"]\s*;?/gm;
  let importExpr = /.*\{([^}{]+)\}\s*from\s*['"]([^'"]+)['"].*/;
  let templateUrlExpr = /\btemplateUrl\s*:\s*['"]([^}{,]+)['"]/g;

  //console.error(file);
  //console.error(imports);
  //console.error(file.match(templateUrlExpr));
  res.contents = file
    .replace(importsExpr, '')
    .replace(templateUrlExpr, (match, tmpl) => {
      tmpl = '$t(\'' + path.basename(tmpl) + '\')';
      return 'template: ' + tmpl;
    })
    //.replace(/\s*as\s+[a-zA-Z0-9_<>]+/g, '')
    .replace(/^\s*export\s+/gm, '')
    .trim();

  let imports = file.match(importsExpr) || [];
  for(let imp of imports) {
    let match = imp.match(importExpr);
    if(!match) {
      throw new Error('!import.match ' + imp);
    }
    let vars = match[1].split(',').map(s => s.trim()).filter(s => s.length);
    let matchPath = match[2];
    if(matchPath.startsWith('.')) {
      matchPath = path.basename(matchPath);
      //console.error(matchPath);
      res.localImports.push(matchPath);
    }
    else {
      //console.error(vars, matchPath);
      res.imports.push({
        module: matchPath,
        vars: vars
      });
    }
  }

  return res;
}

function load(files) {
  let modules = {};
  for(let path_ of files) {
    let moduleName = path.basename(path_).replace(/\.ts$/, '');
    let file = fs.readFileSync(path_).toString();
    if(modules[moduleName]) {
      throw new Error('duplicate module "'.concat(
        moduleName, '":\n ', path, '\n ', modules[moduleName].path
      ));
    }
    let module_ = parse(file);
    module_.path = path_;
    modules[moduleName] = module_;
  }
  return modules;
}

function writeImports(modules, importVars) {
  console.log(`
const $t = (id) => {
	let el = document.getElementById(id);
	if(el) {
		return el.textContent;
	}
	throw new Error('no element with id "' + id + '"');
};

const PREVIEW = document.body.hasAttribute('onload');
`);

  let imports = {};
  for(let name in modules) {
    for(let imp of modules[name].imports) {
      let importVars = imports[imp.module];
      if(!importVars) {
        imports[imp.module] = importVars = {};
      }
      for(let var_ of imp.vars) {
        importVars[var_] = true;
      }
    }
  }

  for(let module in imports) {
    let vars = Object.keys(imports[module]);
    if(!importVars[module]) {
      throw new Error('module "'.concat(module, '" is not in import config'));
    }
    let expr = 'const { '.concat(
      vars.join(', '), ' } = ', importVars[module], ';'
    );
    console.log(expr);
  }
}

function writeModules(modules) {
  let stack = [ 'main' ];
  modules.main.used = true;
  modules.main.depth = 0;
  while(stack.length) {
    let mod = stack.pop();
    if(!modules[mod]) {
      throw new Error('module not found: ' + mod);
    }
    let depth = modules[mod].depth + 1;
    let imports = modules[mod].localImports;
    for(let imp of imports) {
      if(!modules[imp]) {
        throw new Error('module not found: ' + imp);
      }
      modules[imp].depth = Math.max(+modules[imp].depth || 0, depth);
      if(!modules[imp].used) {
        modules[imp].used = true;
        stack.push(imp);
      }
    }
  }

  let order = Object.values(modules).sort((x, y) => y.depth - x.depth);
  //console.error(order.map(m=>m.path));

  for(let m of order) {
    console.log('\n\n// '.concat(path.basename(m.path)));
    console.log(m.contents);
  }
}

function main(argv) {
  if(argv.length < 4) {
    console.error('usage:', argv[1], '<import vars config> <file...>');
    return 1;
  }
  let importVars = JSON.parse(fs.readFileSync(argv[2]).toString());
  let modules = load(argv.slice(3));
  //console.error(modules);
  writeImports(modules, importVars);
  writeModules(modules);
  return 0;
}


process.exit(main(process.argv));
